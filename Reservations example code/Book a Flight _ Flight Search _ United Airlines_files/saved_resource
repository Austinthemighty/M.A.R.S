mmcore.SetCookie('mmid','952316275|DwAAAAphSFZj3gwAAA==',365,1);mmcore.SetCookie('pd','-130907294|EAAAAAoBQmFIVmPeDKr3tLQGAKPnqnLoGtNIDwAAANimnXaAGNNIAAAAAAEAAAD/////AA53d3cuZ29vZ2xlLmNvbQTeDAYAAAAAAAAAAAAANhcAADYXAAA2FwAAAAAAAAABRQ==',365);mmcore.SetCookie('srv','lvsvwcgus01',365);(function(){if(typeof(mmcore.GenInfo)!='object')mmcore.GenInfo={};mmcore.EH=function(e){var s=e.message+'\r\n';if(!window.mm_error)window.mm_error=s;else window.mm_error+=s;};
try{
mmcore.SetCookie = function (n,v,d,g){var _t=this,_h=_t._Host(_t._TL(location.hostname)),exp=_t._FutureDate(d);
			_t._d.cookie=escape(eval(g)?n:_t._PN(n))+'='+escape(v)+(_h.length?';domain='+(g?(navigator.userAgent.match(/MSIE/)?location.host:mmcore.cookie_domain):_h):'')
				+';path=/'+(typeof d!='undefined'&&d!=0?(';expires='+exp.toGMTString()):'');_t.SetParam(n,v)};
}catch(err){mmcore.EH(err);}
try{
;(function(){var o=!0,w=null;
(function(B){function v(a){if("bug-string-char-index"==a)return"a"!="a"[0];var f,c="json"==a;if(c||"json-stringify"==a||"json-parse"==a){if("json-stringify"==a||c){var d=k.stringify,b="function"==typeof d&&l;if(b){(f=function(){return 1}).toJSON=f;try{b="0"===d(0)&&"0"===d(new Number)&&'""'==d(new String)&&d(m)===r&&d(r)===r&&d()===r&&"1"===d(f)&&"[1]"==d([f])&&"[null]"==d([r])&&"null"==d(w)&&"[null,null,null]"==d([r,m,w])&&'{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}'==d({a:[f,o,!1,w,"\x00\u0008\n\u000c\r\t"]})&&
"1"===d(w,f)&&"[\n 1,\n 2\n]"==d([1,2],w,1)&&'"-271821-04-20T00:00:00.000Z"'==d(new Date(-864E13))&&'"+275760-09-13T00:00:00.000Z"'==d(new Date(864E13))&&'"-000001-01-01T00:00:00.000Z"'==d(new Date(-621987552E5))&&'"1969-12-31T23:59:59.999Z"'==d(new Date(-1))}catch(n){b=!1}}if(!c)return b}if("json-parse"==a||c){a=k.parse;if("function"==typeof a)try{if(0===a("0")&&!a(!1)){f=a('{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}');var e=5==f.a.length&&1===f.a[0];if(e){try{e=!a('"\t"')}catch(g){}if(e)try{e=
1!==a("01")}catch(i){}}}}catch(O){e=!1}if(!c)return e}return b&&e}}var m={}.toString,p,C,r,D=typeof define==="function"&&define.amd,k="object"==typeof exports&&exports;k||D?"object"==typeof JSON&&JSON?k?(k.stringify=JSON.stringify,k.parse=JSON.parse):k=JSON:D&&(k=B.JSON={}):k=B.JSON||(B.JSON={});var l=new Date(-3509827334573292);try{l=-109252==l.getUTCFullYear()&&0===l.getUTCMonth()&&1===l.getUTCDate()&&10==l.getUTCHours()&&37==l.getUTCMinutes()&&6==l.getUTCSeconds()&&708==l.getUTCMilliseconds()}catch(P){}if(!v("json")){var s=
v("bug-string-char-index");if(!l)var t=Math.floor,J=[0,31,59,90,120,151,181,212,243,273,304,334],z=function(a,f){return J[f]+365*(a-1970)+t((a-1969+(f=+(f>1)))/4)-t((a-1901+f)/100)+t((a-1601+f)/400)};if(!(p={}.hasOwnProperty))p=function(a){var f={},c;if((f.__proto__=w,f.__proto__={toString:1},f).toString!=m)p=function(a){var f=this.__proto__,a=a in(this.__proto__=w,this);this.__proto__=f;return a};else{c=f.constructor;p=function(a){var f=(this.constructor||c).prototype;return a in this&&!(a in f&&
this[a]===f[a])}}f=w;return p.call(this,a)};var K={"boolean":1,number:1,string:1,undefined:1};C=function(a,f){var c=0,b,h,n;(b=function(){this.valueOf=0}).prototype.valueOf=0;h=new b;for(n in h)p.call(h,n)&&c++;b=h=w;if(c)c=c==2?function(a,f){var c={},b=m.call(a)=="[object Function]",d;for(d in a)!(b&&d=="prototype")&&!p.call(c,d)&&(c[d]=1)&&p.call(a,d)&&f(d)}:function(a,f){var c=m.call(a)=="[object Function]",b,d;for(b in a)!(c&&b=="prototype")&&p.call(a,b)&&!(d=b==="constructor")&&f(b);(d||p.call(a,
b="constructor"))&&f(b)};else{h=["valueOf","toString","toLocaleString","propertyIsEnumerable","isPrototypeOf","hasOwnProperty","constructor"];c=function(a,f){var c=m.call(a)=="[object Function]",b,d;if(d=!c)if(d=typeof a.constructor!="function"){d=typeof a.hasOwnProperty;d=d=="object"?!!a.hasOwnProperty:!K[d]}d=d?a.hasOwnProperty:p;for(b in a)!(c&&b=="prototype")&&d.call(a,b)&&f(b);for(c=h.length;b=h[--c];d.call(a,b)&&f(b));}}c(a,f)};if(!v("json-stringify")){var L={92:"\\\\",34:'\\"',8:"\\b",12:"\\f",
10:"\\n",13:"\\r",9:"\\t"},u=function(a,f){return("000000"+(f||0)).slice(-a)},G=function(a){var f='"',b=0,d=a.length,h=d>10&&s,n;for(h&&(n=a.split(""));b<d;b++){var e=a.charCodeAt(b);switch(e){case 8:case 9:case 10:case 12:case 13:case 34:case 92:f=f+L[e];break;default:if(e<32){f=f+("\\u00"+u(2,e.toString(16)));break}f=f+(h?n[b]:s?a.charAt(b):a[b])}}return f+'"'},E=function(a,b,c,d,h,n,e){var g=b[a],i,j,k,l,q,s,v,x,y;try{g=b[a]}catch(A){}if(typeof g=="object"&&g){i=m.call(g);if(i=="[object Date]"&&
!p.call(g,"toJSON"))if(g>-1/0&&g<1/0){if(z){k=t(g/864E5);for(i=t(k/365.2425)+1970-1;z(i+1,0)<=k;i++);for(j=t((k-z(i,0))/30.42);z(i,j+1)<=k;j++);k=1+k-z(i,j);l=(g%864E5+864E5)%864E5;q=t(l/36E5)%24;s=t(l/6E4)%60;v=t(l/1E3)%60;l=l%1E3}else{i=g.getUTCFullYear();j=g.getUTCMonth();k=g.getUTCDate();q=g.getUTCHours();s=g.getUTCMinutes();v=g.getUTCSeconds();l=g.getUTCMilliseconds()}g=(i<=0||i>=1E4?(i<0?"-":"+")+u(6,i<0?-i:i):u(4,i))+"-"+u(2,j+1)+"-"+u(2,k)+"T"+u(2,q)+":"+u(2,s)+":"+u(2,v)+"."+u(3,l)+"Z"}else g=
w;else if(typeof g.toJSON=="function"&&(i!="[object Number]"&&i!="[object String]"&&i!="[object Array]"||p.call(g,"toJSON")))g=g.toJSON(a)}c&&(g=c.call(b,a,g));if(g===w)return"null";i=m.call(g);if(i=="[object Boolean]")return""+g;if(i=="[object Number]")return g>-1/0&&g<1/0?""+g:"null";if(i=="[object String]")return G(""+g);if(typeof g=="object"){for(a=e.length;a--;)if(e[a]===g)throw TypeError();e.push(g);x=[];b=n;n=n+h;if(i=="[object Array]"){j=0;for(a=g.length;j<a;y||(y=o),j++){i=E(j,g,c,d,h,n,
e);x.push(i===r?"null":i)}a=y?h?"[\n"+n+x.join(",\n"+n)+"\n"+b+"]":"["+x.join(",")+"]":"[]"}else{C(d||g,function(a){var b=E(a,g,c,d,h,n,e);b!==r&&x.push(G(a)+":"+(h?" ":"")+b);y||(y=o)});a=y?h?"{\n"+n+x.join(",\n"+n)+"\n"+b+"}":"{"+x.join(",")+"}":"{}"}e.pop();return a}};k.stringify=function(a,b,c){var d,h,j;if(typeof b=="function"||typeof b=="object"&&b)if(m.call(b)=="[object Function]")h=b;else if(m.call(b)=="[object Array]"){j={};for(var e=0,g=b.length,i;e<g;i=b[e++],(m.call(i)=="[object String]"||
m.call(i)=="[object Number]")&&(j[i]=1));}if(c)if(m.call(c)=="[object Number]"){if((c=c-c%1)>0){d="";for(c>10&&(c=10);d.length<c;d=d+" ");}}else m.call(c)=="[object String]"&&(d=c.length<=10?c:c.slice(0,10));return E("",(i={},i[""]=a,i),h,j,d,"",[])}}if(!v("json-parse")){var M=String.fromCharCode,N={92:"\\",34:'"',47:"/",98:"\u0008",116:"\t",110:"\n",102:"\u000c",114:"\r"},b,A,j=function(){b=A=w;throw SyntaxError();},q=function(){for(var a=A,f=a.length,c,d,h,k,e;b<f;){e=a.charCodeAt(b);switch(e){case 9:case 10:case 13:case 32:b++;
break;case 123:case 125:case 91:case 93:case 58:case 44:c=s?a.charAt(b):a[b];b++;return c;case 34:c="@";for(b++;b<f;){e=a.charCodeAt(b);if(e<32)j();else if(e==92){e=a.charCodeAt(++b);switch(e){case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:c=c+N[e];b++;break;case 117:d=++b;for(h=b+4;b<h;b++){e=a.charCodeAt(b);e>=48&&e<=57||e>=97&&e<=102||e>=65&&e<=70||j()}c=c+M("0x"+a.slice(d,b));break;default:j()}}else{if(e==34)break;e=a.charCodeAt(b);for(d=b;e>=32&&e!=92&&e!=34;)e=a.charCodeAt(++b);
c=c+a.slice(d,b)}}if(a.charCodeAt(b)==34){b++;return c}j();default:d=b;if(e==45){k=o;e=a.charCodeAt(++b)}if(e>=48&&e<=57){for(e==48&&(e=a.charCodeAt(b+1),e>=48&&e<=57)&&j();b<f&&(e=a.charCodeAt(b),e>=48&&e<=57);b++);if(a.charCodeAt(b)==46){for(h=++b;h<f&&(e=a.charCodeAt(h),e>=48&&e<=57);h++);h==b&&j();b=h}e=a.charCodeAt(b);if(e==101||e==69){e=a.charCodeAt(++b);(e==43||e==45)&&b++;for(h=b;h<f&&(e=a.charCodeAt(h),e>=48&&e<=57);h++);h==b&&j();b=h}return+a.slice(d,b)}k&&j();if(a.slice(b,b+4)=="true"){b=
b+4;return o}if(a.slice(b,b+5)=="false"){b=b+5;return false}if(a.slice(b,b+4)=="null"){b=b+4;return w}j()}}return"$"},F=function(a){var b,c;a=="$"&&j();if(typeof a=="string"){if((s?a.charAt(0):a[0])=="@")return a.slice(1);if(a=="["){for(b=[];;c||(c=o)){a=q();if(a=="]")break;if(c)if(a==","){a=q();a=="]"&&j()}else j();a==","&&j();b.push(F(a))}return b}if(a=="{"){for(b={};;c||(c=o)){a=q();if(a=="}")break;if(c)if(a==","){a=q();a=="}"&&j()}else j();(a==","||typeof a!="string"||(s?a.charAt(0):a[0])!="@"||
q()!=":")&&j();b[a.slice(1)]=F(q())}return b}j()}return a},I=function(a,b,c){c=H(a,b,c);c===r?delete a[b]:a[b]=c},H=function(a,b,c){var d=a[b],h;if(typeof d=="object"&&d)if(m.call(d)=="[object Array]")for(h=d.length;h--;)I(d,h,c);else C(d,function(a){I(d,a,c)});return c.call(a,b,d)};k.parse=function(a,f){var c,d;b=0;A=""+a;c=F(q());q()!="$"&&j();b=A=w;return f&&m.call(f)=="[object Function]"?H((d={},d[""]=c,d),"",f):c}}}D&&define(function(){return k})})(this);
}());
}catch(err){mmcore.EH(err);}
try{
;(function(){
    	var fix = mmcore.GetCookie('mm_session');
    	if(fix){
        	mmcore.SetCookie('mm_session', fix, 365, 1);
            	mmcore.SetCookie('mm_session', '', -1);
    	}
	var session = JSON.parse(mmcore.GetCookie('mm_session', 1) || '{}'),
		campaigns = [],
		browserClosed = !mmcore.GetCookie('mm_sopen'),
		time = (new Date()).getTime(),
		expires = time - (20 * 60 * 1000), /* 20 mins */
		update = function(){
			mmcore.SetCookie('mm_session', JSON.stringify(session), 365, 1);
		};

	for(var i in session){
		var s = session[i];
		if(browserClosed || !s.timestamp || s.timestamp < expires){
			s.timestamp = false; /* session ended */
		} else {
			s.timestamp = time;
		}
	}

	mmcore.initSession = function(campaign, alwaysNew){
		var s = session[campaign] = session[campaign] || {timestamp:false, count:0, geninfo:''};
		if(!alwaysNew && s.timestamp) return s.count;
		s.timestamp = (new Date()).getTime();
		s.count += 1;
		update();
		campaigns.push(campaign);
		checkGeneration();
		return s.count;
	};

	mmcore.getSession = function(campaign){
		var s = session[campaign];
		if(!s || !s.timestamp) return false;
		return s.count >= 5 ? '5+' : s.count;
	};

	mmcore.termSession = function(campaign){
		if(!session[campaign]) return;
		session[campaign].timestamp = false;
		update();
	};

	mmcore.sessionAction = function(name, val, options){
		for(var i in session){
			if(session[i].timestamp){
				if(options && options.prefix){
					mmcore.$Action(name, val || 1, i  + ' ' + options.prefix);
				}else{
					mmcore.$Action(name, val || 1, i + ' ' + mmcore.getSession(i));
				}
			}

		}
	};

	var checkGeneration = function(){ /* reset counter to 1 if new experience */
		if(!mmcore.GenInfo) return;
		for(var i = campaigns.length; i--;){
			var cName = campaigns[i],
				s = session[cName],
				GI = mmcore.GenInfo[cName];
			if(!GI || !s) continue;
			var oldGI = s.geninfo || '';
			GI = JSON.stringify(GI);
			if(oldGI != GI){
				if(oldGI != '') s.count = 1;
				s.geninfo = GI;
				update();
			}
		}
	};

	mmcore.CGRequest = (function(o){
		return function(cb){
			cb = cb || function(){};
			return o.call(this, function(){
				checkGeneration();
				return cb();
			});
		};
	})(mmcore.CGRequest);

	update();
	mmcore.SetCookie('mm_sopen', '1', 0);
})();
}catch(err){mmcore.EH(err);}
try{
;(function(){
	mmcore.eventPool = {};
	mmcore.eventListeners = {};

	mmcore.trigger = function(event_type, event_data, callback){
		this.eventPool[event_type] = {
			event_data: event_data,
			callback: callback
		};	

		this.eventListeners[event_type] = this.eventListeners[event_type] || [];

		for(var i = 0; i < this.eventListeners[event_type].length; i++){
			this.eventListeners[event_type][i](event_data);
		}
		callback && callback();
	};

	mmcore.on = function(event_type, callback){
		var lastData = this.eventPool[event_type];

		if(lastData){
			callback(lastData.event_data);
			setTimeout(function(){
				lastData.callback && lastData.callback();
				lastData.callback = null;
			}, 0);
		}
		
		this.eventListeners[event_type] = this.eventListeners[event_type] || [];
		this.eventListeners[event_type].push(callback);
	};

})();
}catch(err){mmcore.EH(err);}
try{
;(function() {
    if(window != window.top)
        return;
    var criteria = {
        'LoggedIn': 'no'
    };

    function restore() {
        try {
            var stored_data = JSON.parse(mmcore.GetCookie('mm_pc', 1) || "{}");
            for (var key in stored_data) {
                criteria[key] = stored_data[key] || criteria[key];
            }
        } catch (e) {}
    }

    function store() {
        mmcore.SetCookie('mm_pc', JSON.stringify(criteria), 365, 1);
    }

    function calculate() {

        restore();

        /* loggedIn */
        var LoggedIn = criteria['LoggedIn'];

        if (document.getElementById('ctl00_CustomerHeader_spanNotSignedIn'))
            LoggedIn = 'no';
        else if (document.getElementById('ctl00_CustomerHeader_spanSignedIn'))
            LoggedIn = 'yes';

        criteria['LoggedIn'] = LoggedIn;
        /* /loggedIn */

        /* MP Status */
        //up oleg 18/02/14
        var CalcMPStatus = function() {
            if (window.Bootstrapper && Bootstrapper.dataObject && Bootstrapper.dataObject._getData) {
                var mpStatus = Bootstrapper.dataObject._getData("MPAccStatus", "visitor", "global");
                if (mpStatus === "--") {
                    if (Bootstrapper.dataObject.setMPVars) {
                        Bootstrapper.dataObject.setMPVars();
                    }
                    mpStatus = Bootstrapper.dataObject._getData("MPAccStatus", "visitor", "global");
                }
                criteria['MPStatus'] = mpStatus;
            }
        };
        CalcMPStatus();


        var CalcDaysToFlight = function CalcDaysToFlight() {
            if (location.pathname.indexOf('web/en-US/apps/reservation/flight/view/default.aspx') == 1) {
                var arr = $.trim($('th.hdrDeparting').text().replace(/\s*\|.*/, '')).split(/,*\s/);
                if (arr.length == 4) {
                    var months = {
                        'Jan.': '0',
                        'Feb.': '1',
                        'Mar.': '2',
                        'Apr.': '3',
                        'May.': '4',
                        'Jun.': '5',
                        'Jul.': '6',
                        'Aug.': '7',
                        'Sep.': '8',
                        'Oct.': '9',
                        'Nov.': '10',
                        'Dec.': '11'
                    };

                    var daysTillFirstFlight = new Date(arr[3], months[arr[1]], arr[2]);
                    var out = Math.floor((daysTillFirstFlight - new Date()) / 86400000);
                    if (!isNaN(out)) {

                        if(out <= 3){
                            var dtf = '0-3 days';
                        } else if (out <= 7){
                            var dtf = '4-7 days';
                        } else if (out <= 14){
                            var dtf = '8-14 days';
                        } else if (out <= 21){
                            var dtf = '15-21 days';
                        } else if (out <= 59){
                            var dtf = '22-59 days';
                        } else {
                            var dtf = '60+ days';
                        }

                        criteria['DaysToFlight'] = dtf;
                    }
                }

            }

        };
        CalcDaysToFlight();
        //
        var CalcTilePlacement = function() {
            if (location.pathname.indexOf('web/en-US/apps/reservation/flight/view/default.aspx') == 1) {

                var nodeList = ['#ctl00_ContentInfo_ViewRes_divPremierAccessBanner',
                    '#ctl00_ContentInfo_ViewRes_divEconomyPlusBanner'
                ];

                var isMoreFirst = function(nodes, idName) {
                    var name = idName.substr(1);
                    var banner_02 = nodes.get(1);
                    var banner_03 = nodes.get(2);
                    return (banner_02 && banner_02.id == name) || (banner_03 && banner_03.id == name);
                };

                var tiles = $(nodeList.join());
                if (tiles.length > 0 && document.querySelectorAll('.revitinBanner').length > 2) {
                    if (isMoreFirst(tiles, nodeList[0])) {
                        criteria['TilePlacement'] = 'Premier';
                    } else if (isMoreFirst(tiles, nodeList[1])) {
                        criteria['TilePlacement'] = 'EPlus';
                    } else {
                        criteria['TilePlacement'] = 'First';
                    }
                }
            }
        };
        CalcTilePlacement();

        /* CID criteria */
        if(/billingRevenue\.aspx/.test(location.href)){
            try {
                /* Stored Card */
                criteria['Stored Card'] = 'No';
                if (document.getElementById("ctl00_ContentInfo_FormsOfPayment1_CreditCardList_cboCreditCard"))
                    criteria['Stored Card'] = 'Yes';

                var tripType = '',
                    segmentsCount = '',
                    lengthOfStay = '',
                    daysToDeparture = 0,
                    fareClass = '';

                /* start client code copy */

                    //Function to convert 12 hour format to 24 hour format
                    var converTo24 = function(d) {
                        var splitBy = "";
                        var t = d.toLowerCase();
                        if (t.indexOf("pm") > 0) {
                            splitBy = "pm";
                        } else if (t.indexOf("am") > 0) {
                            splitBy = "am";
                        }

                        var slices = t.split(splitBy);
                        if (slices.length > 1) {
                            var hm = slices[0].split(":");
                            var h = parseInt(hm[0], 10);
                            var m = hm[1];
                            if (splitBy === "pm" && h !== 12) {
                                h += 12;
                            } else if (splitBy === "am" && h === 12) {
                                h += 12;
                            }
                            if (h.toString().length === 1) {
                                h = "0" + h.toString();
                            }
                            return h + ":" + m + ":" + "00";
                        } else {
                            return "";
                        }
                    };

                    var targetTables = Bootstrapper.getElementsByClassName("tblTrip");
                    var segments = [];
                    var k = 0;

                    for (i = 0; targetTables.length > i; i++) {
                        segments[i] = {};
                        segments[i].legs = [];
                        k = 0;
                        for (n = 0; targetTables[i].rows.length > n; n++) {
                            for (j = 0; targetTables[i].rows[n].cells.length > j; j++) {
                                var col = targetTables[i].rows[n].cells[j];
                                if (n === 0 && j === 0) {
                                    var tripDetails = col.innerHTML.split("|");
                                    var dateString = tripDetails[0].replace(/<[^>]+>/g, "");
                                    dateString = dateString.replace(/\.|,/g, "");
                                    segments[i].flightDate = new Date(dateString).format("MM/dd/yyyy");

                                    var tripAirports = tripDetails[1].split(" to ");
                                    segments[i].origAirport = tripAirports[0].match(/\((\w{3})/)[1];
                                    segments[i].destAirport = tripAirports[1].match(/\((\w{3})/)[1];
                                }
                                if ((n % 2) > 0) {
                                    if (n > 1 & j === 0) {
                                        k++;
                                    }
                                    if (segments[i].legs[k] === undefined) {
                                        segments[i].legs[k] = {};
                                    }
                                    if (j === 0) {
                                        var rows = col.innerHTML.replace(/<\/div>/ig, "|").split("|");
                                        segments[i].legs[k].departureTime = converTo24(col.innerHTML.match(/timeDepart[^<]+</)[0].split(">")[1].replace(/\s|\.|</g, ""));
                                        var departDate = new Date(rows[2].replace(/<[^>]+>/g, "").replace(/\.|,/g, ""));
                                        segments[i].legs[k].flightDate = departDate.format("MM/dd/yyyy");
                                        segments[i].legs[k].flightDateISO = departDate.format("yyyy-MM-dd");
                                        segments[i].legs[k].origAirport = rows[3].match(/\((\w{3})/)[1];
                                    } else if (j === 1) {
                                        var rows = col.innerHTML.replace(/^\n|\n$/, "").split("\n");
                                        segments[i].legs[k].arrivalTime = converTo24(rows[1].replace(/<[^>]+>/g, "").replace(/\s|\./g, ""));
                                        var arriveDate = new Date(rows[2].replace(/<[^>]+>/g, "").replace(/\.|,/g, ""));
                                        segments[i].legs[k].arrivalDate = arriveDate.format("MM/dd/yyyy");
                                        segments[i].legs[k].arrivalDateISO = arriveDate.format("yyyy-MM-dd");
                                        segments[i].legs[k].destAirport = rows[3].match(/\((\w{3})/)[1];
                                    } else if (j === 2) {
                                        segments[i].legs[k].duration = eval(col.innerHTML.match(/<br>([^<]+)</i)[1].replace("hr", "*60+").replace(/mn|\s/g, ""));
                                        var tTimes = col.innerHTML.replace(/<[^>]+>/g, "").split("Travel Time:");
                                        if (tTimes && tTimes.length > 1) {
                                            segments[i].travelTime = eval(tTimes[1].replace("hr", "*60+").replace(/mn|\s/g, ""));
                                        }
                                    } else if (j === 3) {
                                        segments[i].legs[k].miles = parseInt(col.innerHTML.replace(/<[^>]+>/g, "").replace(/\s|,/g, "").split(":")[1].split("/")[0], 10);
                                        var awardMiles = col.innerHTML.replace(/<[^>]+>/g, "").split("Total Award Miles:");
                                        if (awardMiles && awardMiles.length > 1) {
                                            segments[i].totalMiles = parseInt(awardMiles[1].replace(/\s|,/g, ""), 10);
                                        }
                                    } else if (j === 4) {
                                        segments[i].legs[k].flight = col.innerHTML.match(/Flight:\s?<b>([^<]+)</i)[1];
                                        segments[i].legs[k].aircraft = col.innerHTML.match(/Aircraft:\s<b>([^<]+)</i)[1];
                                        segments[i].legs[k].fareClass = col.innerHTML.match(/Fare\sClass:\s.+\((\w{1})\)/)[1];
                                    }
                                }
                            }
                        }
                    }

                    if (Bootstrapper.dataObject.page && !Bootstrapper.dataObject.page.flightSearch) {
                        //Extract and save flight search criteria
                        Bootstrapper.dataObject.page.flightSearch = {};


                        //Read Cookies with relevant search data, extract data and save in the data object
                        var trips = [];
                        var searchCookie = Bootstrapper.Cookies.get("CoAirSearchForm").split("&");
                        var paxCookie = Bootstrapper.Cookies.get("PaxForm").split("&");
                        var orig1, dest1, orig2, dest2, dateOD, dateRD = null;
                        if (searchCookie !== undefined && searchCookie.length > 0) {
                            for (i = 0; searchCookie.length > i; i++) {
                                var keyVal = searchCookie[i].split("=");
                                if (keyVal && keyVal.length > 0) {
                                    try {
                                        if (keyVal[0].toLowerCase() === "cabin^1") {
                                            Bootstrapper.dataObject.page.flightSearch.cabinType2 = keyVal[1].replace(/(.*\(| -.*)/ig, '');
                                        } else if (keyVal[0].toLowerCase() === "origin^1") {
                                            Bootstrapper.dataObject.page.flightSearch.orig1 = orig1 = keyVal[1].replace(/(.*\(| -.*)/ig, '');
                                        } else if (keyVal[0].toLowerCase() === "destination^1") {
                                            Bootstrapper.dataObject.page.flightSearch.dest1 = dest1 = keyVal[1].replace(/(.*\(| -.*)/ig, '');
                                        } else if (keyVal[0].toLowerCase() === "origin^2") {
                                            Bootstrapper.dataObject.page.flightSearch.orig2 = orig2 = keyVal[1].replace(/(.*\(| -.*)/ig, '');
                                        } else if (keyVal[0].toLowerCase() === "destination^2") {
                                            Bootstrapper.dataObject.page.flightSearch.dest2 = dest2 = keyVal[1].replace(/(.*\(| -.*)/ig, '');
                                        } else if (keyVal[0].toLowerCase() === "departdate^1") {
                                            dateOD = new Date(unescape(keyVal[1]) + ' 00:00:00');
                                            Bootstrapper.dataObject.page.flightSearch.travelDate1 = dateOD.format("MM/dd/yyyy");
                                            Bootstrapper.dataObject.page.flightSearch.travelDate1ISO = dateOD.format("yyyy-MM-dd");
                                        } else if (keyVal[0].toLowerCase() === "departdate^2") {
                                            dateRD = new Date(unescape(keyVal[1]) + ' 00:00:00');
                                            Bootstrapper.dataObject.page.flightSearch.travelDate2 = dateRD.format("MM/dd/yyyy");
                                        } else if (keyVal[0].toLowerCase() === "departtime^1") {
                                            Bootstrapper.dataObject.page.flightSearch.travelTime1 = converTo24(unescape(keyVal[1]).replace(" ", ""));
                                        } else if (keyVal[0].toLowerCase() === "departtime^2") {
                                            Bootstrapper.dataObject.page.flightSearch.travelTime2 = converTo24(unescape(keyVal[1]).replace(" ", ""));
                                        }

                                        var key = keyVal[0].split("^");
                                        var val = keyVal[1].replace("+", "");
                                        if (trips[parseInt(key[1], 10)] === undefined) {
                                            trips[parseInt(key[1], 10)] = {};
                                        }
                                        trips[parseInt(key[1], 10)][key[0]] = val;
                                    } catch (e) {
                                        //console.log('e1', e);
                                    }
                                }
                            }
                        }

                        var tripType2 = "";
                        Bootstrapper.dataObject.page.flightSearch.trips = trips;
                        if (trips.length > 2 && (trips[1].Origin !== trips[trips.length - 1].Destination)) {
                            Bootstrapper.dataObject.page.flightSearch.finalDest = trips[trips.length - 1].Destination;
                            Bootstrapper.dataObject.page.flightSearch.finalTravelDate = unescape(trips[trips.length - 1].DepartDate);
                            var finalDate = new Date(Bootstrapper.dataObject.page.flightSearch.finalTravelDate + ' 00:00:00');
                            Bootstrapper.dataObject.page.flightSearch.finalTravelDateISO = finalDate.format("yyyy-MM-dd");
                            Bootstrapper.dataObject.page.flightSearch.finalTravelTime = converTo24(unescape(trips[trips.length - 1].DepartTime).replace(" ", ""));
                            tripTipe2 = "multiple";
                        } else if (trips.length === 3 && (trips[1].Origin === trips[trips.length - 1].Destination)) {
                            Bootstrapper.dataObject.page.flightSearch.finalDest = dest1;
                            Bootstrapper.dataObject.page.flightSearch.finalTravelDate = unescape(trips[trips.length - 1].DepartDate);
                            var finalDate = new Date(Bootstrapper.dataObject.page.flightSearch.finalTravelDate + ' 00:00:00');
                            Bootstrapper.dataObject.page.flightSearch.finalTravelDateISO = finalDate.format("yyyy-MM-dd");
                            Bootstrapper.dataObject.page.flightSearch.finalTravelTime = converTo24(unescape(trips[trips.length - 1].DepartTime).replace(" ", ""));
                            tripType2 = "round";
                        } else if (trips.length > 3 && (trips[1].Origin === trips[trips.length - 1].Destination)) {
                            Bootstrapper.dataObject.page.flightSearch.finalDest = trips[trips.length - 2].Destination;
                            Bootstrapper.dataObject.page.flightSearch.finalTravelDate = unescape(trips[trips.length - 1].DepartDate);
                            var finalDate = new Date(Bootstrapper.dataObject.page.flightSearch.finalTravelDate + ' 00:00:00');
                            Bootstrapper.dataObject.page.flightSearch.finalTravelDateISO = finalDate.format("yyyy-MM-dd");
                            Bootstrapper.dataObject.page.flightSearch.finalTravelTime = converTo24(unescape(trips[trips.length - 1].DepartTime).replace(" ", ""));
                            tripType2 = "multi-round";
                        } else if (trips.length === 2) {
                            Bootstrapper.dataObject.page.flightSearch.finalDest = dest1;
                            Bootstrapper.dataObject.page.flightSearch.finalTravelDate = "";
                            Bootstrapper.dataObject.page.flightSearch.finalTravelDateISO = "";
                            Bootstrapper.dataObject.page.flightSearch.finalTravelTime = "";
                            tripType2 = "one-way";
                        }
                        Bootstrapper.dataObject.page.flightSearch.tripType2 = tripType2;

                        //Get passenger count and save it in the data object
                        var paxCount = 0;
                        if (paxCookie !== undefined && paxCookie.length > 0) {
                            for (i = 0; paxCookie.length > i; i++) {
                                var keyValPair = paxCookie[i].split("=");
                                if (keyValPair[0].toLowerCase().match(/count\^[1-8]/)) {
                                    paxCount += parseInt(keyValPair[1]);
                                }
                            }
                        }
                        Bootstrapper.dataObject.page.flightSearch.paxCount = paxCount;


                        //Get cabin type
                        var cabinTypeContainer = document.getElementById("ctl00_ContentInfo_Results_availSummary1_lblCabin");
                        if (cabinTypeContainer !== null) {
                            Bootstrapper.dataObject.page.flightSearch.cabinType = cabinTypeContainer.innerHTML;
                        }


                        //Determine trip type and save the output to the data object
                        var timeDropdownArr = Bootstrapper.getElementsByClassName('cboTime');
                        tripType = '';
                        if (timeDropdownArr.length === 1) {
                            tripType = 'One Way';
                        } else {
                            if (orig1 === dest2 && orig2 === dest1) {
                                tripType = 'Round Trip';
                            } else {
                                tripType = 'Multiple Destinations';
                            }
                        }
                        Bootstrapper.dataObject.page.flightSearch.tripType = tripType;

                        //Determine length of stay and save it to the data object
                        if (dateOD && dateRD) {
                            var stayLength = 0;
                            Bootstrapper.dataObject.page.flightSearch.travelDate2ISO = dateRD.format("yyyy-MM-dd");
                            if (tripType !== 'One Way') {
                                var ms1 = dateOD.getTime();
                                var ms2 = dateRD.getTime();
                                Bootstrapper.dataObject.page.flightSearch.stayLength = parseInt((ms2 - ms1) / 86400000);
                            }
                        }


                        //Determine and set Saturday Night Stay variable
                        var satNightStay = "No";

                        var d = new Date();
                        var offset = d.getTimezoneOffset() * 60 * 1000;
                        var departDateUTC = new Date(Bootstrapper.dataObject.page.flightSearch.travelDate1ISO);
                        var returnDateUTC;

                        if (Bootstrapper.dataObject.page.flightSearch.tripType === "Round Trip") {
                            returnDateUTC = new Date(Bootstrapper.dataObject.page.flightSearch.travelDate2ISO);
                        } else if (Bootstrapper.dataObject.page.flightSearch.tripType === "Multiple Destinations") {
                            returnDateUTC = new Date(Bootstrapper.dataObject.page.flightSearch.finalTravelDateISO);
                        }

                        var departDate = new Date(departDateUTC.getTime() + offset);
                        var returnDate = new Date(returnDateUTC.getTime() + offset);

                        var stayLength = (returnDate - departDate) / (1000 * 60 * 60 * 24);

                        if (stayLength > 7) {
                            satNightStay = "Yes";
                        } else {
                            for (var i = 0; stayLength > i; i++) {
                                if (new Date(departDate.getTime() + ((1000 * 60 * 60 * 24) * i)).getDay() === 6) {
                                    satNightStay = "Yes";
                                }
                            }
                        }

                        Bootstrapper.dataObject.page.flightSearch.satNightStay = satNightStay;
                    }




                    lengthOfStay = 0;
                    daysToDeparture = 0;
                    var timeOfDeparture = "--";
                    fareClass = "--";

                    if (segments && segments.length > 0 && segments[0]) {
                        var origin = (segments[0].origAirport) ? segments[0].origAirport : "--";
                        var dest = (segments[0].destAirport) ? segments[0].destAirport : "--";

                        var outTripTime = segments[0].legs[0].departureTime;
                        var outTripDate = new Date(segments[0].flightDate + " " + outTripTime);

                        if (segments.length > 1) {
                            var retTripDate = new Date(segments[1].flightDate + " " + segments[1].legs[0].departureTime);
                            lengthOfStay = Math.floor((retTripDate - outTripDate) / (1000 * 60 * 60 * 24));
                        }

                        if (lengthOfStay < 1) {
                            lengthOfStay = "<1";
                        }

                        daysToDeparture = Math.floor((outTripDate - new Date()) / (1000 * 60 * 60 * 24));
                        var dd = daysToDeparture;
                        if (dd < 4) {
                            daysToDeparture = "0-3";
                        } else if (dd < 7) {
                            daysToDeparture = "4-6";
                        } else if (dd < 14) {
                            daysToDeparture = "7-13";
                        } else if (dd < 21) {
                            daysToDeparture = "14-20";
                        } else if (dd < 60) {
                            daysToDeparture = "21-59";
                        } else if (dd >= 60) {
                            daysToDeparture = "60+";
                        }


                        if (segments[0].legs.length > 0) {
                            fareClass = segments[0].legs[0].fareClass;
                        }
                    }

                    tripType = "";
                    switch (segments.length) {
                        case 1:
                            tripType = "One Way";
                            break;
                        case 2:
                            tripType = "Round Trip";
                            break;
                        default:
                            tripType = "Multiple Destinations"
                    }

                    segmentsCount = 0;
                    for (var i = 0; segments.length > i; i++) {
                        segmentsCount += segments[i].legs.length;
                    }

                    if (outTripTime && outTripTime.length > 0) {
                        var dh = parseInt(outTripTime.split(":")[0], 10);

                        if (dh >= 0 && dh < 3) {
                            timeOfDeparture = "Midnight";
                        } else if (dh >= 3 && dh < 6) {
                            timeOfDeparture = "Early Morning";
                        } else if (dh >= 6 && dh < 9) {
                            timeOfDeparture = "Morning";
                        } else if (dh >= 9 && dh < 12) {
                            timeOfDeparture = "Late Morning";
                        } else if (dh >= 12 && dh < 15) {
                            timeOfDeparture = "Noon";
                        } else if (dh >= 15 && dh < 18) {
                            timeOfDeparture = "Afternoon";
                        } else if (dh >= 18 && dh < 20) {
                            timeOfDeparture = "Evening";
                        } else if (dh >= 20 && dh < 24) {
                            timeOfDeparture = "Late Evening";
                        }
                    }

                    //hub or spoke
                    var hubs = ["EWR", "IAD", "ORD", "CLE", "IAH", "DEN", "LAX", "SFO"];
                    origin = $.inArray(origin, hubs) > -1 ? "hub" : "spoke";
                    dest = $.inArray(dest, hubs) > -1 ? "hub" : "spoke";

                /* end client code copy */

                if(lengthOfStay <= 6){
                    lengthOfStay = '0-6 days';
                } else if(lengthOfStay <= 13){
                    lengthOfStay = '7-13 days';
                } else if(lengthOfStay <= 27){
                    lengthOfStay = '14-27 days';
                } else if(lengthOfStay <= 59){
                    lengthOfStay = '28-59 days';
                } else {
                    lengthOfStay = '60+ days';
                }

                criteria["Trip Type"] = tripType;
                criteria["Segment Count"] = segmentsCount;
                criteria["Stay Length"] = lengthOfStay;
                criteria["Days to Depart"] = daysToDeparture;
                criteria["Fare Class"] = fareClass;
                criteria["Sat Night Stay"] = Bootstrapper.dataObject.page.flightSearch.satNightStay || "No";
            }catch(e){ /* console.log('e2', e); */ }
        }
        store();
    }

    mmcore.getCriteria = function() {
        calculate();
        return criteria;
    };

    calculate();

    mmcore.AddDocLoadHandler(function(){
        calculate();

        var bootstrapChecker = setInterval(function(){
            if(!window.Bootstrapper || !Bootstrapper.dataObject)
                return;
            clearInterval(bootstrapChecker);
            calculate();
            setTimeout(calculate, 2e3);
        }, 100);
        setTimeout(function(){
            clearInterval(bootstrapChecker);
        }, 15e3);
    });

})();
}catch(err){mmcore.EH(err);}
try{
;(function(){
	mmcore.snippets = mmcore.snippets || {};
	mmcore.snippets.Style = function (css) {
		var doc = document, st = doc.createElement("style");
		st.type = "text/css";
		st.media = "screen";
		function attach(css) {
			if (st && css) {
				if (st.styleSheet) {
					st.styleSheet.cssText += css;
				} else {
					st.innerHTML += css;
				}
			}
		}

		function detach() {
			st && st.parentNode.removeChild(st);
			st = null;
		}

		attach(css);
		var mm = doc.getElementById(mmcore.cprefix + 1);
		mm.parentNode.insertBefore(st, mm);
		return {
			attach: attach,
			detach: detach
		}
	}
}());
}catch(err){mmcore.EH(err);}
try{
(function () {
	window.mmCampaignPush = function () {
		if (window.Bootstrapper.Cookies) {
			var getDateTime = function () {
				var now = new Date();
				var strDateTime = [[AddZero(now.getMonth() + 1), AddZero(now.getDate()), now.getFullYear()].join('-'), [AddZero(now.getHours()), AddZero(now.getMinutes())].join(':')].join('-');

				function AddZero(num) {
					return (num >= 0 && num < 10) ? '0' + num : num + '';
				}

				return strDateTime;
			};
			var time = 1 / 48;
			var obj;

			try {
				obj = JSON.parse(mmcore.GetCookie('mmCampExp'));
				if (typeof obj != 'object') {
					obj = {}
				}
			} catch (err) {
				obj = {}
			}

			obj.start = obj.start || getDateTime();
			obj.campaigns = obj.campaigns || {};
			var gen = mmcore.GenInfo;
			for (var camp in gen) {
				obj.campaigns[camp] = gen[camp];
			}
			var str = JSON.stringify(obj);
			mmcore.SetCookie('mmCampExp', str, time);

		}
	};

	mmCampaignPush();
	mmcore.CGRequest = (function (o) {
		return function (cb) {
			cb = cb || function () {
			};
			return o.call(this, function () {
				try {
					mmCampaignPush();
				} catch (err) {

				}

				return cb();
			});
		};
	})(mmcore.CGRequest);

}());

}catch(err){mmcore.EH(err);}
try{
;(function(){
	function bind(el, func){
		if(el.addEventListener){
			el.addEventListener('beforeprint', func, false);
		}else if(el.attachEvent){
			el.attachEvent('onbeforeprint', func);
		}	
	}

	if(navigator.userAgent.match(/msie/i)){
		bind(window, function(){
			var nodes = document.getElementsByTagName('script');
			for(var i = nodes.length; i--;){
				if((nodes[i].id || '').match(mmcore.cprefix))
					nodes[i].removeAttribute('src');
			}
		});
	}
})();
}catch(err){mmcore.EH(err);}
try{
if (typeof(Bootstrapper._mm_checkGI) === "function") {
	setTimeout(Bootstrapper._mm_checkGI, 0);
}

mmcore.CGRequest = (function(CGRequest) {
	return function(callback) {
		CGRequest.call(this, function() {
			callback = typeof(callback) === "function" ? callback : function emptyCB() {};
			callback();
                  	if (typeof(Bootstrapper._mm_checkGI) === "function") {
				setTimeout(Bootstrapper._mm_checkGI, 0);
                        }
		});
	};
})(mmcore.CGRequest);
}catch(err){mmcore.EH(err);}
if(typeof mmcore._callback=='object'&&typeof mmcore._callback[1]=='function'){try{mmcore._callback[1]();}catch(err){mmcore.EH(err);}
finally{mmcore._callback[1]=null;}}
})();